package test;
import model.*;

public class TestGraph 
{
	@SuppressWarnings("unused")
	public static void main(String[] args) 
	{
		int[][] matrix_4x4 = 
			new int[][] 
				{
					{0,0,1,0},
					{0,0,1,1},
					{1,1,0,0},
					{0,1,0,0}
				};
		int[][] matrix_8x8_1Component = 
			new int[][] 
			{
				{0,1,0,1,0,1,0,0},
				{1,0,1,0,0,1,1,0},
				{0,1,0,0,0,0,0,0},
				{1,0,0,0,1,0,0,0},
				{0,0,0,1,0,1,0,0},
				{1,1,0,0,1,0,0,1},
				{0,1,0,0,0,0,0,1},
				{0,0,0,0,0,1,1,0}
			};
		int[][] matrix_8x8_3Component = 
			new int[][] 
			{	
				{0,1,0,1,0,0,0,0},
				{1,0,0,0,1,0,0,0},
				{0,0,0,0,0,1,0,0},
				{1,0,0,0,1,0,0,0},
				{0,1,0,1,0,0,0,0},
				{0,0,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,1},
				{0,0,0,0,0,0,1,0}
			};
		int[][] matrix_8x8_4Component = 
			new int[][] 
			{	
				{0,1,0,1,0,0,0,0},
				{1,0,0,1,0,0,0,0},
				{0,0,0,0,0,1,0,0},
				{1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0},
				{0,0,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,1},
				{0,0,0,0,0,0,1,0}
			};
		int[][] matrix_8x8b = 
			new int[][] 
			{
				{0,1,1,1,0,0,0,0},
				{1,0,0,0,1,0,0,0},
				{1,0,0,0,0,1,0,0},
				{1,0,0,0,1,1,1,0},
				{0,1,0,1,0,0,1,1},
				{0,0,1,1,0,0,1,1},
				{0,0,0,1,1,1,0,1},
				{0,0,0,0,1,1,1,0}
			};
		int[][] matrix_15x15_A = 
			new int[][] 
			{
				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O}*/
				/*A*/{0,1,0,0,0,1,1,0,0,1,0,0,0,0,0},
				/*B*/{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
				/*C*/{0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
				/*D*/{0,0,0,0,1,0,1,0,0,0,0,0,0,0,0},
				/*E*/{0,0,0,1,0,0,0,0,1,0,0,0,0,0,0},
				/*F*/{1,0,0,0,0,0,1,0,0,0,1,1,0,0,0},
				/*G*/{1,0,0,1,0,1,0,0,0,0,1,0,1,0,1},
				/*H*/{0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
				/*I*/{0,0,1,0,1,0,0,1,0,0,0,0,1,0,0},
				/*J*/{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
				/*K*/{0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
				/*L*/{0,0,0,0,0,1,0,0,0,0,0,0,1,0,0},
				/*M*/{0,0,0,0,0,0,1,0,1,0,0,1,0,1,0},
				/*N*/{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0},
				/*O*/{0,0,0,0,0,0,1,1,0,0,0,0,0,0,0}
			};
		int[][] matrix_25x25_B = 
			new int[][] 
			{
				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y}*/
				/*A*/{0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*B*/{1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*C*/{0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*D*/{1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*E*/{0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*F*/{0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*G*/{0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0},
				/*H*/{0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*I*/{0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0},
				/*J*/{0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
				/*K*/{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
				/*L*/{0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
				/*M*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
				/*N*/{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				/*O*/{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				/*P*/{0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				/*Q*/{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0},
				/*R*/{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0},
				/*S*/{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
				/*T*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
				/*U*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0},
				/*V*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0},
				/*W*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1},
				/*X*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
				/*Y*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0}
				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y}*/
			};
		int[][] matrix_26x26_C = 
			new int[][] 
			{
				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z}*/
				/*A*/{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*B*/{1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*C*/{0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*D*/{0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*E*/{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*F*/{0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
				/*G*/{0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
				/*H*/{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
				/*I*/{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*J*/{0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*K*/{0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*L*/{0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*M*/{0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0},
				/*N*/{0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0},
				/*O*/{0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0},
				/*P*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0},
				/*Q*/{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				/*R*/{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
				/*S*/{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
				/*T*/{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0},
				/*U*/{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0},
				/*V*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0},
				/*W*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
				/*X*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
				/*Y*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1},
				/*Z*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}
				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z}*/
			};
		int[][] matrix_200x200_200components = new int[200][200];
		int[][] matrix_200x200_1Component = new int[200][200];
			for (int i=0;i<matrix_200x200_1Component.length-1;i++)
			{
				matrix_200x200_1Component[i][i+1]=1;
				matrix_200x200_1Component[i+1][i]=1;
			}
		int[][] matrix_200x200_random = new int[200][200];
			for (int z=0;z<matrix_200x200_random.length;z++)
				for(int s=z;s<matrix_200x200_random.length;s++)
					matrix_200x200_random[z][s]=(int) Math.round( Math.random());
			for (int z=1;z<matrix_200x200_random.length;z++)
				for(int s=0;s<z;s++)
					matrix_200x200_random[z][s]=matrix_200x200_random[s][z];
			for (int z=0;z<matrix_200x200_random.length;z++)
				matrix_200x200_random[z][z]=0;
		

		
		Matrix ma= new Matrix(matrix_200x200_1Component);
		System.out.println(ma);
		Graph gr = new Graph("test");
		gr.setAdjazensmatirx(ma);
		gr.berechneDistanzmatrix();
		System.out.println(gr.getDistanzMatrix());
		gr.berechneDurchmesserRadiusZentrum();
		gr.berechneWegmatrix();
		System.out.println(gr.getWegmatrix());
		
////		----------------------Test export/import csv ---------------------------
		try 
		{
			System.out.println("Test: exp_csv");
			gr.exportAdjazensmatirxCsv("java.io.tmpdir");
			System.out.println("Test: imp_csv");
			gr.importMatrixCsv("java.io.tmpdir", ",");
			System.out.println(gr.getAdjazensmatirx());
		} 
		catch (GraphenRechnerException e) 
		{
			System.out.println(e.getMessage());
		}
//		-------------------- test calcComponents ------------------------------------
		int[] comp = gr.calcComponents(gr.getWegmatrix());
		for(int i:comp)
			System.out.print(i + " ");
	}


}


