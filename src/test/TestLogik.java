package test;
import model.*;

public class TestLogik 
{

	public static void main(String[] args) 
	{
		int[][] matrix = 
			new int[][] 
			{
				/*4x4*/
				{0,0,1,0},
				{0,0,1,1},
				{1,1,0,0},
				{0,1,0,0}
//				/*8x8*/
//				{0,1,0,1,0,1,0,0},
//				{1,0,1,0,0,1,1,0},
//				{0,1,0,0,0,0,0,0},
//				{1,0,0,0,1,0,0,0},
//				{0,0,0,1,0,1,0,0},
//				{1,1,0,0,1,0,0,1},
//				{0,1,0,0,0,0,0,1},
//				{0,0,0,0,0,1,1,0}
//			
//				{0,1,1,1,0,0,0,0},
//				{1,0,0,0,1,0,0,0},
//				{1,0,0,0,0,1,0,0},
//				{1,0,0,0,1,1,1,0},
//				{0,1,0,1,0,0,1,1},
//				{0,0,1,1,0,0,1,1},
//				{0,0,0,1,1,1,0,1},
//				{0,0,0,0,1,1,1,0}
//				/*15x15 Graph A*/
//				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O}*/
//				/*A*/{0,1,0,0,0,1,1,0,0,1,0,0,0,0,0},
//				/*B*/{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*C*/{0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
//				/*D*/{0,0,0,0,1,0,1,0,0,0,0,0,0,0,0},
//				/*E*/{0,0,0,1,0,0,0,0,1,0,0,0,0,0,0},
//				/*F*/{1,0,0,0,0,0,1,0,0,0,1,1,0,0,0},
//				/*G*/{1,0,0,1,0,1,0,0,0,0,1,0,1,0,1},
//				/*H*/{0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
//				/*I*/{0,0,1,0,1,0,0,1,0,0,0,0,1,0,0},
//				/*J*/{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
//				/*K*/{0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
//				/*L*/{0,0,0,0,0,1,0,0,0,0,0,0,1,0,0},
//				/*M*/{0,0,0,0,0,0,1,0,1,0,0,1,0,1,0},
//				/*N*/{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0},
//				/*O*/{0,0,0,0,0,0,1,1,0,0,0,0,0,0,0}
//				/*25x25 (Graph B)*/
//				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y}*/
//				/*A*/{0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*B*/{1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*C*/{0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*D*/{1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*E*/{0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*F*/{0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*G*/{0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0},
//				/*H*/{0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*I*/{0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0},
//				/*J*/{0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//				/*K*/{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
//				/*L*/{0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
//				/*M*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
//				/*N*/{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
//				/*O*/{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
//				/*P*/{0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*Q*/{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0},
//				/*R*/{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0},
//				/*S*/{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
//				/*T*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},
//				/*U*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0},
//				/*V*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0},
//				/*W*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1},
//				/*X*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
//				/*Y*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0}
//				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y}*/
//				/*26x26 (Graph C)*/
//				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z}*/
//				/*A*/{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*B*/{1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*C*/{0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*D*/{0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*E*/{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*F*/{0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*G*/{0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
//				/*H*/{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
//				/*I*/{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*J*/{0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*K*/{0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*L*/{0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*M*/{0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0},
//				/*N*/{0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0},
//				/*O*/{0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0},
//				/*P*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0},
//				/*Q*/{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//				/*R*/{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//				/*S*/{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
//				/*T*/{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0},
//				/*U*/{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0},
//				/*V*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0},
//				/*W*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
//				/*X*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
//				/*Y*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1},
//				/*Z*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}
//				/*   {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z}*/
			};
//		Matrix ma = new Matrix(matrix);
//		System.out.println(ma);
		int len=matrix.length;
		for (int ze=0; ze<len; ze++)
		{
			for (int sp=ze; sp<len; sp++)
			{
				for (int sp0Ze=0;sp0Ze<sp;sp0Ze++)
					System.out.print(ze+"|"+sp0Ze+"*"+sp0Ze+"|"+sp+" + ");
				for (int spSp=sp; spSp<len; spSp++)
					System.out.print(ze+"|"+(spSp)+"*"+sp+"|"+spSp+" + ");
				System.out.print('\n');
			}
		}
		System.out.println("\n hallo1 \n");
		System.out.println(toString(matrix));
		System.out.println("\n hallo2 \n");
		int[][][] potenzMatrizen = new int[matrix.length][matrix.length][matrix.length];
		int[][] distanzMatrix = new int[matrix.length][matrix.length];
		for (int i=0; i<matrix.length;i++)
		{
			distanzMatrix[i]=matrix[i].clone();
			potenzMatrizen[1]=matrix.clone();
		}
		for (int square=2; square<matrix.length; square++)
		{
			for (int ze=0; ze<len; ze++)
			{
				for (int sp=ze; sp<len; sp++)
				{
					int vortex = 0;
					for (int spZe=0;spZe<sp;spZe++)
//						System.out.print(ze+"|"+sp0Ze+"*"+sp0Ze+"|"+sp+" + ");
						vortex += potenzMatrizen[square-1][spZe][sp]*matrix[ze][spZe];
					for (int spSp=sp; spSp<len; spSp++)
//						System.out.print(ze+"|"+(spSp)+"*"+sp+"|"+spSp+" + ");
						vortex += potenzMatrizen[square-1][sp][spSp]*matrix[ze][spSp];
					potenzMatrizen[square][ze][sp]=vortex;
				}
			}
		}
		for (int ma=0; ma<matrix.length; ma++)
		{
			System.out.println(toString(potenzMatrizen[ma]));
		}
	}
	public static String toString(int[][] matrix)
	{
		int length = matrix.length;
		StringBuilder sb = new StringBuilder();
		for (int line=0; line<length;line++)
		{
			for (int column=0; column<length;column++)
				sb.append(String.format("%5d", matrix[line][column]));
			sb.append("\n\n");
		}
		sb.append('\n');
		return sb.toString();
	}

}


